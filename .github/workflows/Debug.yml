name: Debug

on:  
  workflow_dispatch: 
    inputs:
      environment:
        description: 'Environment to run build and deploy against'
        type: environment
        required: true 

jobs:

  setup-azure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:    
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Provide an identity to access the Azure Key Vault
        id: add-identity
        shell: pwsh
        run: |          
          write-host "Set subscription"          
          az account set --subscription ${{secrets.SUBSCRIPTION_ID}}

          $identity = az identity list --resource-group sitecore-apr_group --query "[?name=='${{secrets.USER_ASSIGNED_IDENTITY_NAME}}']" | ConvertFrom-Json
          if($identity.length -eq 0){ 
            write-host "Create a managed identity"        
            az identity create --name ${{secrets.USER_ASSIGNED_IDENTITY_NAME}} --resource-group ${{secrets.RESOURCE_GROUP}}            
            Start-Sleep -s 60
          }
          else
          {
              write-host "PRINCIPAL IDENTITY WITH NAME "${{secrets.USER_ASSIGNED_IDENTITY_NAME}}" ALREADY EXISTS"
          }

          $USER_ASSIGNED_CLIENT_ID = az identity show -g ${{secrets.RESOURCE_GROUP}} --name ${{secrets.USER_ASSIGNED_IDENTITY_NAME}} --query 'clientId' -o tsv
          $USER_ASSIGNED_PRINCIPAL_ID = az identity show -g ${{secrets.RESOURCE_GROUP}} --name ${{secrets.USER_ASSIGNED_IDENTITY_NAME}} --query 'principalId' -o tsv
          write-host "USER_ASSIGNED_CLIENT_ID: $USER_ASSIGNED_CLIENT_ID"
          write-host "USER_ASSIGNED_PRINCIPAL_ID: $USER_ASSIGNED_PRINCIPAL_ID"

          "clientID=$USER_ASSIGNED_CLIENT_ID" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          $IDENTITY_TENANT = az aks show --name ${{secrets.CLUSTER_NAME}} --resource-group ${{secrets.RESOURCE_GROUP}} --query identity.tenantId -o tsv
          write-host "IDENTITY_TENANT: $IDENTITY_TENANT"     

          write-host "Create a role assignment that grants the workload identity permission to access the key vault secrets, access keys, and certificates"
          $KEYVAULT_SCOPE = az keyvault show --name ${{secrets.AZURE_KV_NAME}} --query id -o tsv
          write-host "KEYVAULT_SCOPE: $KEYVAULT_SCOPE"

          $assignee = az role assignment list --scope $KEYVAULT_SCOPE --query "[?principalId=='$USER_ASSIGNED_PRINCIPAL_ID' && roleDefinitionName=='Key Vault Administrator']" | ConvertFrom-Json
          if($assignee.length -eq 0){ 
            az role assignment create --role "Key Vault Administrator" --assignee $USER_ASSIGNED_PRINCIPAL_ID --scope $KEYVAULT_SCOPE
          }
          else
          {
              write-host "ROLE ASSIGNMENT IS ALREADY EXISTS"
          }         
          
          write-host "Get the AKS cluster OIDC Issuer URL"
          $AKS_OIDC_ISSUER= az aks show --resource-group ${{secrets.RESOURCE_GROUP}} --name ${{secrets.CLUSTER_NAME}} --query "oidcIssuerProfile.issuerUrl" -o tsv
          echo "AKS_OIDC_ISSUER: $AKS_OIDC_ISSUER"

          $federated_identity = az identity federated-credential list --identity-name ${{secrets.USER_ASSIGNED_IDENTITY_NAME}} --resource-group ${{secrets.RESOURCE_GROUP}} --query "[?name=='${{secrets.FEDERATED_IDENTITY_NAME}}']" | ConvertFrom-Json
          if($federated_identity.length -eq 0){ 
            write-host "Create the federated identity credential between the managed identity, service account issuer, and subject"
            az identity federated-credential create --name ${{secrets.FEDERATED_IDENTITY_NAME}} --identity-name ${{secrets.USER_ASSIGNED_IDENTITY_NAME}} --resource-group ${{secrets.RESOURCE_GROUP}} --issuer $AKS_OIDC_ISSUER --subject system:serviceaccount:${{secrets.ENVIRONMENT_NAMESPACE}}:${{secrets.SERVICE_ACCOUNT_NAME}}
          }
          else
          {
              write-host "FEDERATED IDENTITY CREDENTIAL IS ALREADY ADDED"
          }      
          
    outputs:
      clientID: ${{ steps.add-identity.outputs.clientID }}      
